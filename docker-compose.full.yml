services:
  cache:
    extends:
      file: docker-services.yml
      service: cache
  db:
    extends:
      file: docker-services.yml
      service: db
  mq:
    extends:
      file: docker-services.yml
      service: mq
  search:
    extends:
      file: docker-services.yml
      service: search
  pgadmin:
    extends:
      file: docker-services.yml
      service: pgadmin
  opensearch-dashboards:
    extends:
      file: docker-services.yml
      service: opensearch-dashboards
  # Frontend
  frontend:
    extends:
      file: docker-services.yml
      service: frontend
    volumes:
      - static_data:/opt/invenio/var/instance/static
    depends_on:
      - web-ui
      - web-api
      - iipserver
    ports:
      - "${DOCKER_SERVICES_IP_BIND:-127.0.0.1}:80:80"
      - "${DOCKER_SERVICES_IP_BIND:-127.0.0.1}:443:443"
  # UI Application
  web-ui:
    extends:
      file: docker-services.yml
      service: app
    entrypoint: ["bash", "-c"]
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_ui.ini"]
    environment:
      # Disable IIIF Proxy, since nginx/frontend handles it
      - "INVENIO_IIIF_PROXY_CLASS=None"
    image: zenodo:latest
    ports:
      - "${DOCKER_SERVICES_IP_BIND:-127.0.0.1}:5000"
    volumes:
      - static_data:/opt/invenio/var/instance/static
      - uploaded_data:/opt/invenio/var/instance/data
      - archived_data:/opt/invenio/var/instance/archive
    depends_on:
      search:
        condition: service_started
      cache:
        condition: service_started
      db:
        condition: service_started
      mq:
        condition: service_started
  # API Rest Application
  web-api:
    extends:
      file: docker-services.yml
      service: app
    entrypoint: ["bash", "-c"]
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_rest.ini"]
    environment:
      # Disable IIIF Proxy, since nginx/frontend handles it
      - "INVENIO_IIIF_PROXY_CLASS=None"
    image: zenodo:latest
    ports:
      - "${DOCKER_SERVICES_IP_BIND:-127.0.0.1}:5000"
    volumes:
      - uploaded_data:/opt/invenio/var/instance/data
      - archived_data:/opt/invenio/var/instance/archive
    depends_on:
      search:
        condition: service_started
      cache:
        condition: service_started
      db:
        condition: service_started
      mq:
        condition: service_started
  iipserver:
    extends:
      file: docker-services.yml
      service: iipserver
    volumes:
      - image_tiles:/images

  # Worker
  worker:
    extends:
      file: docker-services.yml
      service: app
    restart: "unless-stopped"
    entrypoint: ["bash", "-c"]
    command: ["celery -A invenio_app.celery worker --beat --events --loglevel=INFO"]
    image: zenodo:latest
    volumes:
      - uploaded_data:/opt/invenio/var/instance/data
      - archived_data:/opt/invenio/var/instance/archive
      - image_tiles:/opt/invenio/var/instance/images
    depends_on:
      search:
        condition: service_started
      cache:
        condition: service_started
      db:
        condition: service_started
      mq:
        condition: service_started
volumes:
  static_data:
  uploaded_data:
  archived_data:
  image_tiles:
